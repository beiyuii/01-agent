"""
配置管理模块
使用 Pydantic BaseSettings 管理应用配置
"""
import os
from typing import Optional, List
from pydantic import Field, field_validator
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    """应用配置类"""
    
    # 环境配置
    environment: str = Field(default="development", description="运行环境")
    debug: bool = Field(default=True, description="调试模式")
    log_level: str = Field(default="INFO", description="日志级别")
    
    # API 配置
    dashscope_api_key: str = Field(..., description="百炼API密钥")
    dashscope_model: str = Field(default="qwen-turbo", description="默认使用的模型")
    dashscope_base_url: Optional[str] = Field(default=None, description="API基础URL")
    
    # 数据库配置
    chroma_persist_directory: str = Field(
        default="./data/chroma", 
        description="ChromaDB数据持久化目录"
    )
    chroma_collection_name: str = Field(
        default="job_postings", 
        description="ChromaDB集合名称"
    )
    
    # 文件存储配置
    reports_directory: str = Field(
        default="./data/reports", 
        description="报告文件存储目录"
    )
    uploads_directory: str = Field(
        default="./data/uploads", 
        description="上传文件临时存储目录"
    )
    
    # 服务配置
    host: str = Field(default="0.0.0.0", description="服务监听地址")
    port: int = Field(default=8000, description="服务端口")
    workers: int = Field(default=1, description="工作进程数")
    
    # 业务配置
    max_file_size: int = Field(default=10 * 1024 * 1024, description="最大文件大小(字节)")
    allowed_file_types: List[str] = Field(
        default_factory=lambda: ["pdf", "docx", "txt"], 
        description="允许的文件类型"
    )
    max_recommendations: int = Field(default=10, description="最大推荐数量")
    similarity_threshold: float = Field(default=0.6, description="相似度阈值")
    
    # 缓存配置
    enable_cache: bool = Field(default=True, description="是否启用缓存")
    cache_ttl: int = Field(default=3600, description="缓存过期时间(秒)")
    
    model_config = {
        "env_file": ".env",
        "env_file_encoding": "utf-8",
        "case_sensitive": False
    }
    
    @field_validator('allowed_file_types', mode='before')
    @classmethod
    def parse_allowed_file_types(cls, v):
        if isinstance(v, str):
            return [item.strip() for item in v.split(',') if item.strip()]
        return v
        
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # 确保必要的目录存在
        self._ensure_directories()
    
    def _ensure_directories(self):
        """确保必要的目录存在"""
        directories = [
            self.chroma_persist_directory,
            self.reports_directory,
            self.uploads_directory
        ]
        
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
    
    @property
    def is_production(self) -> bool:
        """判断是否为生产环境"""
        return self.environment.lower() == "production"
    
    @property
    def is_development(self) -> bool:
        """判断是否为开发环境"""
        return self.environment.lower() == "development"


# 全局配置实例
settings = Settings()


def get_settings() -> Settings:
    """获取配置实例"""
    return settings